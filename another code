# ðŸŽµ Spotify Genre Segmentation Using ML

# Step 1: Import Required Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 2: Load Dataset (Replace with your actual path or upload in Colab)
from google.colab import files
uploaded = files.upload()

# For example: 'spotify_data.csv'
df = pd.read_csv(next(iter(uploaded)))
df.head()

# Step 3: Basic Exploration
print(df.shape)
print(df.info())
print(df.describe())
print(df['genre'].value_counts())

# Step 4: Preprocessing
# Drop irrelevant columns (e.g., 'track_id', 'artist_name', etc. if present)
df = df.drop(columns=['track_id', 'track_name', 'artist_name'], errors='ignore')

# Handle missing values
df = df.dropna()

# Encode categorical genre labels
le = LabelEncoder()
df['genre'] = le.fit_transform(df['genre'])

# Step 5: Feature Selection and Scaling
X = df.drop('genre', axis=1)
y = df['genre']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Step 6: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Step 7: Train Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 8: Evaluate Model
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Step 9: Confusion Matrix
plt.figure(figsize=(10,6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

# Step 10: Genre Prediction Function
def predict_genre(input_features):
    input_scaled = scaler.transform([input_features])
    pred = model.predict(input_scaled)
    return le.inverse_transform(pred)[0]

# Example:
# predict_genre([0.7, 0.8, 0.6, ...])  # Replace with real values
